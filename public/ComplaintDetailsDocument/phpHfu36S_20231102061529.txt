public function getFoodAndBeveragesExpensesByDateAndBranch($userId, $branchId = 0, $dateFrom = 0, $dateTo = 0)
    {
        $UserRole = User::where('users.id', $userId)->value('role');
        $currentDate = Carbon::today()->format('d/m/Y');
        if ($UserRole == 'Admin') {
            if (!$dateFrom && !$dateTo && !$branchId) {
                $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName,(SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.opDate = cast(Date(Now()) as Date)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.opDate = cast(Date(Now()) as Date)) as qty,
                (SELECT SUM(S.cashSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as cashSales, (SELECT SUM(S.cardSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as cardSales, (SELECT SUM(S.entertainerAndVipDiscount) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as vipDiscount, (SELECT SUM(S.hotelAccount) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as hotelAccount, (SELECT SUM(S.partySale) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as partySale,(SELECT SUM(S.totalSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as sales,(SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE SAM.opDate = cast(Date(Now()) as Date)) as onlineSale  FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id WHERE FBE.opDate = cast(Date(Now()) as Date) ORDER BY FBE.foodId ASC");

            } else if (!$dateFrom && !$dateTo && $branchId) {
                $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName,(SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.userId=FBE.userId AND fb.opDate = cast(Date(Now()) as Date)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.userId=FBE.userId AND fb.opDate = cast(Date(Now()) as Date)) as qty,(SELECT SUM(S.cashSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as cashSales, (SELECT SUM(S.cardSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as cardSales, (SELECT SUM(S.entertainerAndVipDiscount) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as vipDiscount, (SELECT SUM(S.hotelAccount) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as hotelAccount, (SELECT SUM(S.partySale) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date)) as partySale,
                (SELECT SUM(S.totalSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as sales,(SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE SAM.opDate = cast(Date(Now()) as Date) AND SAM.userId=FBE.userId) as onlineSale  FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id WHERE FBE.opDate = cast(Date(Now()) as Date) AND B.id = $branchId ORDER BY FBE.foodId ASC");

                // Orignal .......
                // $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName,(SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.userId=FBE.userId AND fb.opDate = cast(Date(Now()) as Date)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.userId=FBE.userId AND fb.opDate = cast(Date(Now()) as Date)) as qty,(SELECT SUM(S.totalSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as sales,(SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE SAM.opDate = cast(Date(Now()) as Date) AND SAM.userId=FBE.userId) as onlineSale  FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id WHERE FBE.opDate = cast(Date(Now()) as Date) AND B.id = $branchId ORDER BY FBE.foodId ASC");

            } else if ($dateFrom && $dateTo && !$branchId) {
                // $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName, (SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate BETWEEN '$dateFrom' AND '$dateTo')) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND (fb.opDate between '$dateFrom' AND '$dateTo')) as qty, (SELECT SUM(S.totalSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as sales, (SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE (SAM.opDate between '$dateFrom' AND '$dateTo')) as onlineSale FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id WHERE (FBE.opDate between '$dateFrom' AND '$dateTo') ORDER BY FBE.foodId ASC");
                $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName, (SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate BETWEEN '$dateFrom' AND '$dateTo')) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND (fb.opDate between '$dateFrom' AND '$dateTo')) as qty, (SELECT SUM(S.cashSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as cashSales, (SELECT SUM(S.cardSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as cardSales, (SELECT SUM(S.entertainerAndVipDiscount) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as vipDiscount, (SELECT SUM(S.hotelAccount) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as hotelAccount, (SELECT SUM(S.partySale) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as partySale,(SELECT SUM(S.totalSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo')) as sales, (SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE (SAM.opDate between '$dateFrom' AND '$dateTo')) as onlineSale FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id WHERE (FBE.opDate between '$dateFrom' AND '$dateTo') ORDER BY FBE.foodId ASC");

            } else if ($dateFrom && $dateTo && $branchId) {
                // =========orignal
                $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName, (SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate BETWEEN '$dateFrom' AND '$dateTo')AND (fb.userId=FBE.userId)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate between '$dateFrom' AND '$dateTo') AND (fb.userId=FBE.userId)) as qty, (SELECT SUM(S.cashSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as cashSales, (SELECT SUM(S.cardSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as cardSales, (SELECT SUM(S.entertainerAndVipDiscount) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as vipDiscount, (SELECT SUM(S.hotelAccount) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as hotelAccount, (SELECT SUM(S.partySale) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as partySale, (SELECT SUM(S.totalSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND (S.userId=FBE.userId)) as sales, (SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE (SAM.opDate between '$dateFrom' AND '$dateTo')AND (SAM.userId=FBE.userId)) as onlineSale FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id
                WHERE (FBE.opDate between '$dateFrom' AND '$dateTo') AND B.id = $branchId ORDER BY FBE.foodId ASC");
            }
        } else if ($UserRole == 'BranchManager') {
            $branchId = User::where('users.id', $userId)->value('branchId');
            if (!$dateFrom && !$dateTo) {
                $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName,(SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.userId=FBE.userId AND fb.opDate = cast(Date(Now()) as Date)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND fb.userId=FBE.userId AND fb.opDate = cast(Date(Now()) as Date)) as qty,(SELECT SUM(S.cashSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as cashSales, (SELECT SUM(S.cardSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as cardSales, (SELECT SUM(S.entertainerAndVipDiscount) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as vipDiscount, (SELECT SUM(S.hotelAccount) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as hotelAccount, (SELECT SUM(S.partySale) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as partySale,(SELECT SUM(S.totalSales) FROM sales as S WHERE S.opDate = cast(Date(Now()) as Date) AND S.userId=FBE.userId) as sales,(SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE SAM.opDate = cast(Date(Now()) as Date) AND SAM.userId=FBE.userId) as onlineSale  FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id WHERE FBE.opDate = cast(Date(Now()) as Date) AND B.id = $branchId ORDER BY FBE.foodId ASC");

            } else if ($dateFrom && $dateTo) {
                // Orignal ......
                // $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName, (SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate BETWEEN '$dateFrom' AND '$dateTo')AND (fb.userId=FBE.userId)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND (fb.opDate between '$dateFrom' AND '$dateTo') AND (fb.userId=FBE.userId)) as qty, (SELECT SUM(S.totalSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND (S.userId=FBE.userId)) as sales, (SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE (SAM.opDate between '$dateFrom' AND '$dateTo')AND (SAM.userId=FBE.userId)) as onlineSale FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id WHERE (FBE.opDate between '$dateFrom' AND '$dateTo') AND B.id = $branchId ORDER BY FBE.foodId ASC");
                // $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName, (SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate BETWEEN '$dateFrom' AND '$dateTo')AND (fb.userId=FBE.userId)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE fb.foodId=FBE.foodId AND (fb.opDate between '$dateFrom' AND '$dateTo') AND (fb.userId=FBE.userId)) as qty, (SELECT SUM(S.totalSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND (S.userId=FBE.userId)) as sales, (SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE (SAM.opDate between '$dateFrom' AND '$dateTo')AND (SAM.userId=FBE.userId)) as onlineSale FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id WHERE (FBE.opDate between '$dateFrom' AND '$dateTo') AND B.id = $branchId ORDER BY FBE.foodId ASC");
                $FoodAndBeveragesExpenses = DB::select("SELECT DISTINCT FBE.foodId,FBM.foodName, (SELECT SUM(fb.amount) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate BETWEEN '$dateFrom' AND '$dateTo')AND (fb.userId=FBE.userId)) as amount,(SELECT SUM(fb.qty) FROM food_and_beverages_expenses as fb WHERE (fb.foodId=FBE.foodId) AND (fb.opDate between '$dateFrom' AND '$dateTo') AND (fb.userId=FBE.userId)) as qty, (SELECT SUM(S.cashSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as cashSales, (SELECT SUM(S.cardSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as cardSales, (SELECT SUM(S.entertainerAndVipDiscount) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as vipDiscount, (SELECT SUM(S.hotelAccount) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as hotelAccount, (SELECT SUM(S.partySale) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND S.userId=FBE.userId) as partySale, (SELECT SUM(S.totalSales) FROM sales as S WHERE (S.opDate between '$dateFrom' AND '$dateTo') AND (S.userId=FBE.userId)) as sales, (SELECT SUM(SA.amount) FROM sales_analysis as SA INNER JOIN sales_analysis_master as SAM ON SA.salesAnalysisMasterId=SAM.id WHERE (SAM.opDate between '$dateFrom' AND '$dateTo')AND (SAM.userId=FBE.userId)) as onlineSale FROM food_and_beverages_expenses as FBE INNER JOIN food_and_beverages_master as FBM ON FBE.foodId=FBM.id LEFT JOIN users ON FBE.userId = users.id LEFT JOIN branch as B ON users.branchId = B.id
                WHERE (FBE.opDate between '$dateFrom' AND '$dateTo') AND B.id = $branchId ORDER BY FBE.foodId ASC");
            }
        }
        if (count($FoodAndBeveragesExpenses) != 0) {
            foreach ($FoodAndBeveragesExpenses as $food) {
                $res = [
                    'foodId' => $food->foodId,
                    'foodName' => $food->foodName,
                    'amount' => $food->amount,
                    'qty' => $food->qty,
                    // 'sales' => $food->sales ? $food->sales : 0,
                    'sales' => ($food->cashSales + $food->cardSales + $food->vipDiscount + $food->hotelAccount + $food->partySale) ? ($food->cashSales + $food->cardSales + $food->vipDiscount + $food->hotelAccount + $food->partySale) : 0,
                    'onlineSale' => $food->onlineSale ? $food->onlineSale : 0,
                    'totalFoodExpenses' => (($food->cashSales + $food->cardSales + $food->vipDiscount + $food->hotelAccount + $food->partySale)  && ($food->onlineSale == 0)) ? $food->amount : str_replace(',', '', number_format(($food->amount) / (($food->sales) + ($food->onlineSale)) * 100, 2)),
                    // 'totalFoodExpenses' => (($food->sales == 0) && ($food->onlineSale == 0)) ? $food->amount : str_replace(',', '', number_format(($food->amount) / (($food->sales) + ($food->onlineSale)) * 100, 2))
                ];
                $result[] = $res;
            }
            $array = [
                'FoodAndBeveragesExpenses' => (count($result) != 0) ? $result : null,
                // 'todaysDate' => date('Y-m-d')
                'startDate' => $dateFrom ? $dateFrom : $currentDate,
                'endDate' => $dateTo ? $dateTo : $currentDate,
            ];
        } else {
            $array = [
                'FoodAndBeveragesExpenses' => $FoodAndBeveragesExpenses,
                // 'todaysDate' => date('Y-m-d')
                'startDate' => $dateFrom ? $dateFrom : $currentDate,
                'endDate' => $dateTo ? $dateTo : $currentDate,
            ];
        }

        if (count($FoodAndBeveragesExpenses) != 0) {
            return response()->json([
                "code" => 201,
                "data" => $array,
                "message" => "Data Fetched Successfully",
            ], 201);
        } else {
            return response()->json([
                "code" => 404,
                "data" => ['todaysDate' => Carbon::today()],
                'message' => 'Not Found',
            ], 404);
        }
    }